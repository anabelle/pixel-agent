import type {
  Action,
  ActionResult,
  HandlerCallback,
  IAgentRuntime,
  Memory,
  Plugin,
  State,
} from '@elizaos/core';
import { logger } from '@elizaos/core';
import { z } from 'zod';

// Configuration schema for the image plugin
const configSchema = z.object({
  OPENAI_API_KEY: z.string().optional(),
  GOOGLE_GENERATIVE_AI_API_KEY: z.string().optional(),
  imageVisionModelProvider: z.string().optional(),
  IMAGE_VISION_MODEL_PROVIDER: z.string().optional(),
  model: z.string().optional(),
});

/**
 * Action to describe/analyze images
 */
const describeImageAction: Action = {
  name: 'DESCRIBE_IMAGE',
  similes: ['ANALYZE_IMAGE', 'IMAGE_ANALYSIS', 'WHAT_DO_YOU_SEE'],
  description: 'Analyzes and generates descriptions for images using AI vision models',

  validate: async (
    runtime: IAgentRuntime,
    message: Memory,
    state: State | undefined
  ): Promise<boolean> => {
    // Check if the message contains an image attachment or image URL
    const content = message.content;
    if (content.attachments && content.attachments.some(att => att.contentType?.startsWith('image/'))) {
      return true;
    }
    if (content.text && (content.text.includes('http') || content.text.includes('image') || content.text.includes('analyze'))) {
      return true;
    }
    return false;
  },

  handler: async (
    runtime: IAgentRuntime,
    message: Memory,
    state: State | undefined,
    options: any,
    callback?: HandlerCallback
  ): Promise<ActionResult> => {
    try {
      const content = message.content;
      let imageUrl = '';

      // Extract image URL from attachments or text
      if (content.attachments && content.attachments.length > 0) {
        const imageAttachment = content.attachments.find(att => att.contentType?.startsWith('image/'));
        if (imageAttachment) {
          imageUrl = imageAttachment.url;
        }
      }

      // If no attachment, try to extract URL from text
      if (!imageUrl && content.text) {
        const urlMatch = content.text.match(/https?:\/\/[^\s]+/);
        if (urlMatch) {
          imageUrl = urlMatch[0];
        }
      }

      if (!imageUrl) {
        return {
          text: 'No image found to analyze. Please provide an image URL or attachment.',
          success: false,
        };
      }

      // Get the vision model provider from settings
      const provider = runtime.getSetting('imageVisionModelProvider') ||
                      runtime.getSetting('IMAGE_VISION_MODEL_PROVIDER') ||
                      'openai';

      let description = '';

      if (provider === 'google' && runtime.getSetting('GOOGLE_GENERATIVE_AI_API_KEY')) {
        // Use Google Gemini for image analysis
        description = await analyzeImageWithGoogle(imageUrl, runtime);
      } else if (runtime.getSetting('OPENAI_API_KEY')) {
        // Use OpenAI Vision API
        description = await analyzeImageWithOpenAI(imageUrl, runtime);
      } else {
        return {
          text: 'No image analysis provider configured. Please set OPENAI_API_KEY or GOOGLE_GENERATIVE_AI_API_KEY.',
          success: false,
        };
      }

      if (callback) {
        await callback({
          text: description,
          actions: ['DESCRIBE_IMAGE'],
          source: message.content.source,
        });
      }

      return {
        text: description,
        success: true,
        data: {
          actions: ['DESCRIBE_IMAGE'],
          source: message.content.source,
          imageUrl: imageUrl,
          provider: provider,
        },
      };
    } catch (error) {
      logger.error({ error }, 'Error in DESCRIBE_IMAGE action:');
      return {
        success: false,
        error: error instanceof Error ? error : new Error(String(error)),
      };
    }
  },

  examples: [
    [
      {
        name: '{{user}}',
        content: {
          text: 'Analyze this image: https://example.com/image.jpg',
          actions: [],
        },
      },
      {
        name: '{{agent}}',
        content: {
          text: 'I see a beautiful landscape with mountains and a lake...',
          actions: ['DESCRIBE_IMAGE'],
        },
      },
    ],
  ],
};

/**
 * Analyze image using Google Gemini
 */
async function analyzeImageWithGoogle(imageUrl: string, runtime: IAgentRuntime): Promise<string> {
  try {
    // This is a placeholder - in a real implementation, you'd use the Google Generative AI SDK
    // For now, return a mock response
    return `I analyzed the image at ${imageUrl} using Google Gemini. This appears to be a digital image with various visual elements. The image shows [detailed description would be generated by Google Gemini API].`;
  } catch (error) {
    logger.error({ error }, 'Error analyzing image with Google Gemini:');
    throw error;
  }
}

/**
 * Analyze image using OpenAI Vision
 */
async function analyzeImageWithOpenAI(imageUrl: string, runtime: IAgentRuntime): Promise<string> {
  try {
    // This is a placeholder - in a real implementation, you'd use the OpenAI SDK
    // For now, return a mock response
    return `I analyzed the image at ${imageUrl} using OpenAI Vision. This appears to be a digital image with various visual elements. The image shows [detailed description would be generated by OpenAI Vision API].`;
  } catch (error) {
    logger.error({ error }, 'Error analyzing image with OpenAI Vision:');
    throw error;
  }
}

/**
 * Create and return the image processing plugin
 */
export function createImagePlugin(): Plugin {
  return {
    name: 'custom-image-plugin',
    description: 'Custom image processing plugin for analyzing and describing images',

    config: {
      OPENAI_API_KEY: process.env.OPENAI_API_KEY,
      GOOGLE_GENERATIVE_AI_API_KEY: process.env.GOOGLE_GENERATIVE_AI_API_KEY,
      imageVisionModelProvider: process.env.imageVisionModelProvider,
      IMAGE_VISION_MODEL_PROVIDER: process.env.IMAGE_VISION_MODEL_PROVIDER,
      model: process.env.model,
    },

    async init(config: Record<string, string>) {
      logger.info('Initializing custom image plugin');
      try {
        const validatedConfig = await configSchema.parseAsync(config);

        // Set all environment variables at once
        for (const [key, value] of Object.entries(validatedConfig)) {
          if (value) process.env[key] = value;
        }

        logger.info('Image plugin initialized successfully');
      } catch (error) {
        if (error instanceof z.ZodError) {
          throw new Error(
            `Invalid plugin configuration: ${error.errors.map((e) => e.message).join(', ')}`
          );
        }
        throw error;
      }
    },

    // Actions provided by this plugin
    actions: [describeImageAction],

    // Providers (if any)
    providers: [],

    // Routes (if any)
    routes: [],

    // Events (if any)
    events: {},

    // Services (if any)
    services: [],
  };
}

// Export the plugin instance as default
const imagePlugin = createImagePlugin();
export default imagePlugin;